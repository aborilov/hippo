// Code generated by "enumer -type=Form -trimprefix=Form -text -json -sql -transform=snake -output=enum_form_gen.go"; DO NOT EDIT.

package model

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _FormName = "tabletcapsuleliquid"

var _FormIndex = [...]uint8{0, 6, 13, 19}

func (i Form) String() string {
	i -= 1
	if i >= Form(len(_FormIndex)-1) {
		return fmt.Sprintf("Form(%d)", i+1)
	}
	return _FormName[_FormIndex[i]:_FormIndex[i+1]]
}

var _FormValues = []Form{1, 2, 3}

var _FormNameToValueMap = map[string]Form{
	_FormName[0:6]:   1,
	_FormName[6:13]:  2,
	_FormName[13:19]: 3,
}

// FormString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FormString(s string) (Form, error) {
	if val, ok := _FormNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Form values", s)
}

// FormValues returns all values of the enum
func FormValues() []Form {
	return _FormValues
}

// IsAForm returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Form) IsAForm() bool {
	for _, v := range _FormValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Form
func (i Form) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Form
func (i *Form) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Form should be a string, got %s", data)
	}

	var err error
	*i, err = FormString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Form
func (i Form) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Form
func (i *Form) UnmarshalText(text []byte) error {
	var err error
	*i, err = FormString(string(text))
	return err
}

func (i Form) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Form) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := FormString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
